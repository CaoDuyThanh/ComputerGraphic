#include "Vector3s.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////                                                                                                //////
//////    ////      /// ///////  /////////  //////////// ////////// //////      ////////  ///////     //////
//////     ////    /// ////    ///////     //////////// ///    /// ///  ///         ///  ///   ///    //////
//////      ////  /// /////// ////            ////     ///    /// ///////       //////  ///    //     //////
//////       /////// ////    //////          ////     ///    /// ///  //          ///  ///   ///      //////
//////        ///// //////// //////////     ////     ////////// ///    //   ////////  ////////        //////
//////                                                                                                //////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

Vector3s::Vector3s():
X(0), Y(0), Z(0)
{
}
// ------------------------------------------------------------------------------------------------
Vector3s::Vector3s(double x, double y, double z):
X(x), Y(y), Z(z)
{
}
// ------------------------------------------------------------------------------------------------
double Vector3s::Length(){
    return sqrt(X * X + Y * Y + Z * Z);
}
// ------------------------------------------------------------------------------------------------
void Vector3s::Normalize(){
    double l = Length();
    X = X / l;	Y = Y / l;	Z = Z / l;
}
// ------------------------------------------------------------------------------------------------
double Vector3s::Dot(Vector3s &b){
    return X*b.X + Y*b.Y + Z*b.Z;
}
// ------------------------------------------------------------------------------------------------
void Vector3s::Lerp(Vector3s &b, double amount){
    Vector3s dir = b - *this;
    if (dir.Length() < 0.001)
        *this = b;
    else *this += dir * amount;
}
// ------------------------------------------------------------------------------------------------
bool Vector3s::operator == (const Vector3s& v){
    return X == v.X && Y == v.Y && Z == v.Z;
}
// ------------------------------------------------------------------------------------------------
bool Vector3s::operator != (const Vector3s& v){
    return X != v.X || Y != v.Y || Z != v.Z;
}
// ------------------------------------------------------------------------------------------------
Vector3s& Vector3s::operator += (const Vector3s& v){
    X += v.X; Y += v.Y; Z += v.Z;
    return *this;
}
// ------------------------------------------------------------------------------------------------
Vector3s& Vector3s::operator -= (const Vector3s& v){
    X -= v.X; Y -= v.Y; Z -= v.Z;
    return *this;
}
// ------------------------------------------------------------------------------------------------
Vector3s& Vector3s::operator *= (const double value){
    X *= value; Y *= value; Z *= value;
    return *this;
}
// ------------------------------------------------------------------------------------------------
Vector3s& Vector3s::operator /= (const double value){
    X /= value; Y /= value; Z /= value;
    return *this;
}
// ------------------------------------------------------------------------------------------------
Vector3s Vector3s::operator + (const Vector3s& v2){
    return Vector3s(X + v2.X, Y + v2.Y, Z + v2.Z);
}
// ------------------------------------------------------------------------------------------------
Vector3s Vector3s::operator - (const Vector3s& v2){
    return Vector3s(X - v2.X, Y - v2.Y, Z - v2.Z);
}
// ------------------------------------------------------------------------------------------------
Vector3s Vector3s::operator * (const Vector3s& v2){
    return Vector3s(X * v2.X, Y * v2.Y, Z * v2.Z);
}
// ------------------------------------------------------------------------------------------------
Vector3s Vector3s::operator * (const double value){
    return Vector3s(X * value, Y * value, Z * value);
}
// ------------------------------------------------------------------------------------------------
Vector3s Vector3s::operator / (const double value){
    return Vector3s(X / value, Y / value, Z / value);
}
// ------------------------------------------------------------------------------------------------
Vector3s Vector3s::operator / (const Vector3s& v2){
    return Vector3s(X / v2.X, Y / v2.Y, Z / v2.Z);
}
// ------------------------------------------------------------------------------------------------
Vector3s Vector3s::operator ^ (const Vector3s& v2){
    return Vector3s(Y * v2.Z - Z * v2.Y, -X * v2.Z + Z * v2.X, X * v2.Y - Y * v2.X);
}
// ------------------------------------------------------------------------------------------------
Vector3s Vector3s::operator - (){
    return Vector3s(-X, -Y, -Z);
}
// ------------------------------------------------------------------------------------------------
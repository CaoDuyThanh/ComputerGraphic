#include "Vector4s.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////                                                                                                //////
//////    ////      /// ///////  /////////  //////////// ////////// //////        ///     ///////     //////
//////     ////    /// ////    ///////     //////////// ///    /// ///  ///     ///      ///   ///    //////
//////      ////  /// /////// ////            ////     ///    /// ///////     /// ///   ///    //     //////
//////       /////// ////    //////          ////     ///    /// ///  //    ///  ///   ///   ///      //////
//////        ///// //////// //////////     ////     ////////// ///    // //////////  ////////        //////
//////                                                                         ///                    //////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

Vector4s::Vector4s() :
X(0), Y(0), Z(0), T(0)
{
}
// ------------------------------------------------------------------------------------------------
Vector4s::Vector4s(double x, double y, double z, double t):
                  X(x), Y(y), Z(z), T(t)
{
    // Do nothing here
}
// ------------------------------------------------------------------------------------------------
float* Vector4s::ToFloatArray(){
    float floatArray[4];
    floatArray[0] = X;
    floatArray[1] = Y;
    floatArray[2] = Z;
    floatArray[3] = T;
    return &floatArray[0];
}
// ------------------------------------------------------------------------------------------------
bool Vector4s::operator == (const Vector4s& v){
    return X == v.X && Y == v.Y && Z == v.Z && T == v.T;
}
// ------------------------------------------------------------------------------------------------
bool Vector4s::operator != (const Vector4s& v){
    return X != v.X || Y != v.Y || Z != v.Z || T != v.T;
}
// ------------------------------------------------------------------------------------------------
Vector4s& Vector4s::operator += (const Vector4s& v){
    X += v.X; Y += v.Y; Z += v.Z; T += v.T;
    return *this;
}
// ------------------------------------------------------------------------------------------------
Vector4s& Vector4s::operator -= (const Vector4s& v){
    X -= v.X; Y -= v.Y; Z -= v.Z; T -= v.T;
    return *this;
}
// ------------------------------------------------------------------------------------------------
Vector4s& Vector4s::operator *= (const double value){
    X *= value; Y *= value; Z *= value; T += value;
    return *this;
}
// ------------------------------------------------------------------------------------------------
Vector4s& Vector4s::operator /= (const double value){
    X /= value; Y /= value; Z /= value; T /= value;
    return *this;
}
// ------------------------------------------------------------------------------------------------
Vector4s Vector4s::operator + (const Vector4s& v2){
    return Vector4s(X + v2.X, Y + v2.Y, Z + v2.Z, T + v2.T);
}
// ------------------------------------------------------------------------------------------------
Vector4s Vector4s::operator - (const Vector4s& v2){
    return Vector4s(X - v2.X, Y - v2.Y, Z - v2.Z, T - v2.T);
}
// ------------------------------------------------------------------------------------------------
Vector4s Vector4s::operator * (const Vector4s& v2){
    return Vector4s(X * v2.X, Y * v2.Y, Z * v2.Z, T * v2.T);
}
// ------------------------------------------------------------------------------------------------
Vector4s Vector4s::operator * (const double value){
    return Vector4s(X * value, Y * value, Z * value, T * value);
}
// ------------------------------------------------------------------------------------------------
Vector4s Vector4s::operator / (const double value){
    return Vector4s(X / value, Y / value, Z / value, T / value);
}
// ------------------------------------------------------------------------------------------------
Vector4s Vector4s::operator / (const Vector4s& v2){
    return Vector4s(X / v2.X, Y / v2.Y, Z / v2.Z, T / v2.T);
}
// ------------------------------------------------------------------------------------------------
Vector4s Vector4s::operator - (){
    return Vector4s(-X, -Y, -Z, -T);
}
// ------------------------------------------------------------------------------------------------